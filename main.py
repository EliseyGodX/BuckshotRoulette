from threading import Thread
import time
from dotenv import load_dotenv
from os import getenv
import vk
import vk_api
from vk_api.longpoll import VkLongPoll, VkEventType 
from vk_api.utils import get_random_id
from vk_messages import *
from game import Game
from effects import Effects
from keyboards import Keyboard

load_dotenv()

TIME = 900
DELAY_TO_KICK = 90


def message(user_id, message, keyboard=None, delay=True) -> None: 
    if delay == True: time.sleep(1.2)
    if keyboard is None:
        vk.messages.send(   
            user_id=user_id,    
            message=message,    
            random_id=get_random_id(),   
            )
    else:  vk.messages.send(
            user_id=user_id,
            random_id=get_random_id(),
            keyboard=keyboard.get_keyboard(),
            message=message
        )

    


def session(first_id, first_name, second_id, second_name):
    def double_message(text: str) -> None:
        message(first_id, text, delay=False)
        message(second_id, text, delay=False)
        time.sleep(2.5)

    message(second_id, 'üü®–í—ã —Å–∞–¥–∏—Ç–µ—Å—å –∑–∞ —Å—Ç–æ–ª, —Ä—É–∂—å—ë –ª–µ–∂–∏—Ç –∫ –≤–∞–º —Å—Ç–≤–æ–ª–æ–º. –ü–µ—Ä–≤—ã–º —Ö–æ–¥–∏—Ç –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫üü®')
    message(first_id, 'üü©–í—ã —Å–∞–¥–∏—Ç–µ—Å—å –∑–∞ —Å—Ç–æ–ª, —Ä—É–∂—å—ë –ª–µ–∂–∏—Ç –∫ –≤–∞–º –ø—Ä–∏–∫–ª–∞–¥–æ–º. –ü–µ—Ä–≤—ã–π —Ö–æ–¥ –∑–∞ –≤–∞–º–∏üü©')
    game = Game(first_name, second_name, first_id, second_id)
    active = game.first
    passive = game.second
    msg_time = 0
    while active.hp > 0 and passive.hp > 0:
        if len(game.que) == 0: 
            game.new_item()
            game.new_que()
            double_message(f'‚ùó‚ùó‚ùó–ù–æ–≤—ã–π –Ω–∞–±–æ—Ä –ø–∞—Ç—Ä–æ–Ω! üî¥–ë–æ–µ–≤—ã—Ö: {game.que.count(True)}üî¥, ‚ö™–•–æ–ª–æ—Å—Ç—ã—Ö: {game.que.count(False)}‚ö™‚ùó‚ùó‚ùó')

        game.reset()
        double_message(f'''üî´–ù–æ–≤—ã–π —Ö–æ–¥üî´
–†—É–∂—å—ë —É {active.name}

{active.name} —Å—Ç–µ—Ä–ø–∏—Ç –µ—â—ë {active.hp}‚ù§ –ø—É–ª—å, {passive.name} - {passive.hp}‚ù§

üíº –ù–∞ —Å—Ç–æ–ª–µ {active.name}: \n{active.inventory_str()}

üíº –ù–∞ —Å—Ç–æ–ª–µ {passive.name}: \n{passive.inventory_str()}''')
        flag = False
        while flag != True:
            message(active.id, f'üü©–í–∞—à —á–µ—Ä—ë–¥. –ë—É–¥–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —á—Ç–æ –ª–∏–±–æ?üü©\n{active.inventory_str()}',
                    keyboard=Keyboard.inventory(active))
            msg_time = time.time()
            for event in longpoll.listen():
                if time.time() - msg_time > DELAY_TO_KICK: 
                    double_message(f'üü®üü®üü®{active.name} –ø—Ä–æ–∏–≥—Ä—ã–≤–∞–µ—Ç –∏–∑-–∑–∞ –∞—Ñ–∫!üü®üü®üü®')
                    admission[first_name] = time.time()
                    admission[second_name] = time.time()
                    return
                if (event.type ==  VkEventType.MESSAGE_NEW and event.to_me 
                    and event.from_user and event.user_id == active.id):
                    if event.message[0].isdigit() and 1 <= int(event.message[0]) <= 9:
                        try:
                            effect = active.inventory[int(event.message[0]) - 1]
                            if effect == 'üîé –ª—É–ø–∞': 
                                double_message(Effects.magnifier(active, game))
                            elif effect == 'üö¨ —Å–∏–≥–∞—Ä–µ—Ç—ã': 
                                if active.hp == game.max_hp:
                                    message(active.id, f'‚ù§–£ –≤–∞—Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ö–ø, —Å–∏–≥–∞—Ä–µ—Ç—ã –Ω–µ –ø–æ–º–æ–≥—É—Ç‚ù§')
                                else: double_message(Effects.sigarets(active))
                            elif effect == 'üç∫ –ø–∏–≤–æ': 
                                double_message(Effects.beer(active, game))
                            elif effect == 'üî™ –Ω–æ–∂':
                                if active.damage != game.normal_damage: 
                                     message(active.id, f'üî´–†—É–∂—å—ë —É–∂–µ –æ–±—Ä–µ–∑–∞–Ω–æüî´')
                                else: double_message(Effects.knife(active))
                            elif effect == '‚õìÔ∏è –Ω–∞—Ä—É—á–Ω–∏–∫–∏':
                                if passive.handcuffs is True:
                                    message(active.id, f'‚õìÔ∏è–ü—Ä–æ—Ç–∏–≤–Ω–∏–∫ —É–∂–µ —Å–≤—è–∑–∞–Ω‚õìÔ∏è') 
                                else: double_message(Effects.handcuffs(active, passive))
                        except: flag = True
                    elif event.message == '-': flag = True

                    break
        
        message(active.id, f'üü©–í –∫–æ–≥–æ –≤—ã—Å—Ç—Ä–µ–ª–∏—Ç–µ? (/—Å–¥–∞—Ç—å—Å—è)üü©', keyboard=Keyboard.shot())
        msg_time = time.time()
        for event in longpoll.listen(): 
            if time.time() - msg_time > DELAY_TO_KICK: 
                double_message(f'üü®üü®üü®{active.name} –ø—Ä–æ–∏–≥—Ä—ã–≤–∞–µ—Ç –∏–∑-–∑–∞ –∞—Ñ–∫!üü®üü®üü®')
                admission[first_name] = time.time()
                admission[second_name] = time.time()
                return
            if (event.type ==  VkEventType.MESSAGE_NEW and event.to_me 
                and event.from_user and event.user_id == active.id):
                if event.message == '–ü—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞': 
                    bullet = game.shot(active, passive)
                    double_message(f'{active.name} —Å—Ç—Ä–µ–ª—è–µ—Ç –≤ {passive.name}üî´! –ü–∞—Ç—Ä–æ–Ω –æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è {bullet}')
                    if passive.handcuffs != True:
                        passive_ = passive
                        passive = active
                        active = passive_
                    break 
                elif event.message == '–í –°–ï–ë–Ø': 
                    bullet = game.shot(active, active)
                    double_message(f'{active.name} —Å—Ç—Ä–µ–ª—è–µ—Ç üî´ –≤ –°–ï–ë–Ø! –ø–∞—Ç—Ä–æ–Ω –æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è {bullet}')
                    break
                elif event.message == '/—Å–¥–∞—Ç—å—Å—è':
                    double_message(f'üü®üü®üü®{active.name} —Å–¥–∞—ë—Ç—Å—è –∏ –ø—Ä–µ–∫–ª–æ–Ω—è–µ—Ç –∫–æ–ª–µ–Ω–æ –ø–µ—Ä–µ–¥ {passive.name}!üü®üü®üü®')
                    return

    if game.first.hp > 0: name = game.first.name
    else: name = game.second.name
    double_message(f'üü©üü©üü©{name} –û—Ç–ø—Ä–∞–≤–∏–ª –≤ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞ üî´ —Ñ–∏–Ω–∞–ª—å–Ω—É—é –ø—É–ª—é, –∏ –æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–º!üü©üü©üü©')
    admission[first_name] = time.time()
    admission[second_name] = time.time()

        





def main():
    global admission
    lobby = {}
    admission = {}
    for event in longpoll.listen(): 
        if event.type ==  VkEventType.MESSAGE_NEW and event.to_me and event.from_user: 
            if event.message.lower().startswith('–∏–≥—Ä–∞—Ç—å'):
                user_id = event.user_id
                user_get = vk.users.get(user_ids=(user_id), fields='screen_name')[0]
                screen_name = user_get['screen_name']
                
                if screen_name not in admission or time.time() - admission[screen_name] > TIME:
                    lobby[screen_name] = {
                        'id_': user_id,
                        'name': screen_name,
                        'private': False
                    }
                    if screen_name not in admission: admission[screen_name] = 0
                    try:
                        if event.message.split(' ')[1].lower() == '–ø—Ä–∏–≤–∞—Ç': message(user_id, 'üëΩ–í—ã –≤–æ—à–ª–∏ –≤ –ø—Ä–∏–≤–∞—Ç–Ω–æ–µ –ª–æ–±–±–∏üëΩ')
                        lobby[screen_name]['private'] = True
                    except: pass

                    lobby_ = [slot + '\n' for slot in lobby if lobby[slot]['private'] != True]
                    message(user_id, f'üü©–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è <nick> –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Å–µ—Å—Å–∏—é.üü© \n–í –ª–æ–±–±–∏: \n{"".join(lobby_)}')

                else: message(user_id, f'–ú–µ–∂–¥—É –∏–≥—Ä–∞–º–∏ –≤—ã–¥–µ—Ä–∂–∏–≤–∞–π—Ç–µ –ø–µ—Ä–µ—Ä—ã–≤ –≤ 15 –º–∏–Ω—É—Ç (–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –≤–∫). –í–∞–º –æ—Å—Ç–∞–ª–æ—Å—å –∂–¥–∞—Ç—å: {TIME - admission[user_id] - time.time()} —Å–µ–∫—É–Ω–¥')

            elif event.message.lower().startswith('–ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è'):
                user_id = event.user_id
                user_get = vk.users.get(user_ids=(user_id), fields='screen_name')[0]
                screen_name = user_get['screen_name']
                if str(event.message).split(' ')[1] in lobby and str(event.message).split(' ')[1] != screen_name:
                    first_id = lobby[event.message.split(' ')[1]]['id_']
                    first_name = lobby[event.message.split(' ')[1]]['name']

                    if screen_name in admission and time.time() - admission[screen_name] > TIME and time.time() - admission[first_name] > TIME:
                        lobby.pop(first_name)
                        try: lobby.pop(screen_name)
                        except: pass
                        th = Thread(target=session, args=(first_id, first_name, user_id, screen_name, ))
                        th.start()

                else: message(user_id, '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–º—è')

if __name__ == '__main__': 
    vk_session = vk_api.VkApi(token=getenv("TOKEN"))  
    longpoll = VkLongPoll(vk_session)   
    vk = vk_session.get_api()   
    main()
    